#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

Possible Evolutions

Given the name of a pokemon,
display a list of all the pokemon that could evolve into the given pokemon,
and a list of all the pokemon that the given pokemon could evolve into.
"""


import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Pokemon Name>"


### Globals
db = None
Pokemon_Name = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Pokemon_Name = helpers.clean(sys.argv[1])


def main():
    # TODO: YOUR CODE HERE
    cur = db.cursor()
    
    # # Check existing
    cur.execute('''select name from pokemon where name = %s;''', (Pokemon_Name,))
    exists = cur.fetchall()
    if len(exists) == 0:
        print(f"'{Pokemon_Name}' isn't a Pokemon that exists.")

    
    # PRE EVOLUTION
    preSelect = '''
    select
        e.id as evoId,
        pm.name,
        rm.assertion,
        er.inverted
    from
        pokemon pm
        join
        evolutions e on pm.id = e.pre_evolution
        join
        evolution_requirements er on e.id = er.evolution
        join
        requirements rm on er.requirement = rm.id
    where
        e.post_evolution = (
            select
                id
            from
                pokemon
            where
                name = %s
        );
    '''
    cur.execute(preSelect, (Pokemon_Name,))    
    preEvolutions = cur.fetchall()
       
    if len(preEvolutions) == 0:
        print(f"\n'{Pokemon_Name}' doesn't have any pre-evolutions.")
    else: 
        print(f"\n'{Pokemon_Name}' can evolve into:")
        
        prev = ''
        for i in range(len(preEvolutions)):
            if prev != preEvolutions[i][1]:
                print(f"\t'{preEvolutions[i][1]}' when the following requirements are satisfied:")
                print('\t\t', end = "")
                prev = preEvolutions[i][1]
            
            if i < len(preEvolutions) - 1:
                
                if preEvolutions[i][1] == preEvolutions[i+1][1]: #name
                    print('\t', end = "")
                    
                    if preEvolutions[i][0] == preEvolutions[i+1][0]: #id
                        print(f"{preEvolutions[i][2]}")
                        print(f"\t\tAND")
                    else:
                        print(f"{preEvolutions[i][2]}")
                        print(f"\t\tOR")
                        
                    print('\t\t', end = "")
                    
                else: # not the same as next evolution
                    if preEvolutions[i][3] is True:
                        print(f"\tNOT {preEvolutions[i][2]}\n")             
                    else:
                        print(f"\t{preEvolutions[i][2]}\n")  

            else: 
                if preEvolutions[i][3] is True:
                    print(f"\tNOT {preEvolutions[i][2]}\n")             
                else:
                    print(f"\t{preEvolutions[i][2]}\n")              
                
    # POST EVOLUTION
    postSelect = '''
    select
        e.id as evoId,
        pm.name,
        rm.assertion,
        er.inverted
    from
        pokemon pm
        join
        evolutions e on pm.id = e.post_evolution
        join
        evolution_requirements er on e.id = er.evolution
        join
        requirements rm on er.requirement = rm.id
    where
        e.pre_evolution = (
            select
                id
            from
                pokemon
            where
                name = %s
        );
    '''
    cur.execute(postSelect, (Pokemon_Name,))    
    postEvolutions = cur.fetchall()
    
    if len(postEvolutions) == 0:
        print(f"'{Pokemon_Name}' doesn't have any post-evolutions.\n")
    else: 
        print(f"\n'{Pokemon_Name}' can evolve into:")
        
        prev = ''
        for i in range(len(postEvolutions)):
            if prev != postEvolutions[i][1]:
                print(f"\t'{postEvolutions[i][1]}' when the following requirements are satisfied:")
                print('\t\t', end = "")
                prev = postEvolutions[i][1]
            
            if i < len(postEvolutions) - 1:
                
                if postEvolutions[i][1] == postEvolutions[i+1][1]: #name
                    print('\t', end = "")
                    
                    if postEvolutions[i][0] == postEvolutions[i+1][0]: #id
                        print(f"{postEvolutions[i][2]}")
                        print(f"\t\tAND")
                    else:
                        print(f"{postEvolutions[i][2]}")
                        print(f"\t\tOR")
                        
                    print('\t\t', end = "")
                    
                else: # not the same as next evolution
                    if postEvolutions[i][3] is True:
                        print(f"\tNOT {postEvolutions[i][2]}\n")             
                    else:
                        print(f"\t{postEvolutions[i][2]}\n")  

            else: 
                if postEvolutions[i][3] is True:
                    print(f"\tNOT {postEvolutions[i][2]}\n")             
                else:
                    print(f"\t{postEvolutions[i][2]}\n")  
    ...
    

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
